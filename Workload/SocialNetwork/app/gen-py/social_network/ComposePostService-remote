#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from social_network import ComposePostService
from social_network.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ComposePost(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostOnlyLastThree(i64 req_id, i64 user_id, Post post,  carrier)')
    print('  void ComposePostOnlyMiddleAndLastThree(i64 req_id, i64 user_id, TextServiceReturn text_res, Creator creator,  media, i64 post_id, PostType post_type,  carrier)')
    print('  void ComposePostLambdaLastThreeInVM(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaFirstFourInVM(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  ComposePostOnlyFirstFourAndMiddleReturn ComposePostOnlyFirstFourAndMiddle(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  ComposePostOnlyFirstFourReturn ComposePostOnlyFirstFour(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaHomeTimeline(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaTextService(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaHomeTimelineAndTextService(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaHomeTimelineAndTextPostStorageService(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  carrier)')
    print('  void ComposePostLambdaLinearExperiment(i64 req_id, string username, i64 user_id, string text,  media_ids,  media_types, PostType post_type,  microservice_nums,  carrier)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ComposePostService.Client(protocol)
transport.open()

if cmd == 'ComposePost':
    if len(args) != 8:
        print('ComposePost requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePost(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostOnlyLastThree':
    if len(args) != 4:
        print('ComposePostOnlyLastThree requires 4 args')
        sys.exit(1)
    pp.pprint(client.ComposePostOnlyLastThree(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'ComposePostOnlyMiddleAndLastThree':
    if len(args) != 8:
        print('ComposePostOnlyMiddleAndLastThree requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostOnlyMiddleAndLastThree(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaLastThreeInVM':
    if len(args) != 8:
        print('ComposePostLambdaLastThreeInVM requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaLastThreeInVM(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaFirstFourInVM':
    if len(args) != 8:
        print('ComposePostLambdaFirstFourInVM requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaFirstFourInVM(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostOnlyFirstFourAndMiddle':
    if len(args) != 8:
        print('ComposePostOnlyFirstFourAndMiddle requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostOnlyFirstFourAndMiddle(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostOnlyFirstFour':
    if len(args) != 8:
        print('ComposePostOnlyFirstFour requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostOnlyFirstFour(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaHomeTimeline':
    if len(args) != 8:
        print('ComposePostLambdaHomeTimeline requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaHomeTimeline(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaTextService':
    if len(args) != 8:
        print('ComposePostLambdaTextService requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaTextService(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaHomeTimelineAndTextService':
    if len(args) != 8:
        print('ComposePostLambdaHomeTimelineAndTextService requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaHomeTimelineAndTextService(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaHomeTimelineAndTextPostStorageService':
    if len(args) != 8:
        print('ComposePostLambdaHomeTimelineAndTextPostStorageService requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaHomeTimelineAndTextPostStorageService(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService':
    if len(args) != 8:
        print('ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService requires 8 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]),))

elif cmd == 'ComposePostLambdaLinearExperiment':
    if len(args) != 9:
        print('ComposePostLambdaLinearExperiment requires 9 args')
        sys.exit(1)
    pp.pprint(client.ComposePostLambdaLinearExperiment(eval(args[0]), args[1], eval(args[2]), args[3], eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), eval(args[8]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
