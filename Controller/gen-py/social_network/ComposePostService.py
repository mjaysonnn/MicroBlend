#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import logging

from thrift.TRecursive import fix_spec
from thrift.Thrift import TProcessor
from thrift.Thrift import TType, TMessageType, TApplicationException
from thrift.transport import TTransport

from .ttypes import *

all_structs = []


class Iface(object):
    def ComposePost(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostOnlyLastThree(self, req_id, user_id, post, carrier):
        """
        Parameters:
         - req_id
         - user_id
         - post
         - carrier

        """
        pass

    def ComposePostOnlyMiddleAndLastThree(self, req_id, user_id, text_res, creator, media, post_id, post_type, carrier):
        """
        Parameters:
         - req_id
         - user_id
         - text_res
         - creator
         - media
         - post_id
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaLastThreeInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaFirstFourInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostOnlyFirstFourAndMiddle(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostOnlyFirstFour(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaHomeTimeline(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaHomeTimelineAndTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaHomeTimelineAndTextPostStorageService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        pass

    def ComposePostLambdaLinearExperiment(self, req_id, username, user_id, text, media_ids, media_types, post_type, microservice_nums, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - microservice_nums
         - carrier

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def ComposePost(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePost()

    def send_ComposePost(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePost', TMessageType.CALL, self._seqid)
        args = ComposePost_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePost(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePost_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostOnlyLastThree(self, req_id, user_id, post, carrier):
        """
        Parameters:
         - req_id
         - user_id
         - post
         - carrier

        """
        self.send_ComposePostOnlyLastThree(req_id, user_id, post, carrier)
        self.recv_ComposePostOnlyLastThree()

    def send_ComposePostOnlyLastThree(self, req_id, user_id, post, carrier):
        self._oprot.writeMessageBegin('ComposePostOnlyLastThree', TMessageType.CALL, self._seqid)
        args = ComposePostOnlyLastThree_args()
        args.req_id = req_id
        args.user_id = user_id
        args.post = post
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostOnlyLastThree(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostOnlyLastThree_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostOnlyMiddleAndLastThree(self, req_id, user_id, text_res, creator, media, post_id, post_type, carrier):
        """
        Parameters:
         - req_id
         - user_id
         - text_res
         - creator
         - media
         - post_id
         - post_type
         - carrier

        """
        self.send_ComposePostOnlyMiddleAndLastThree(req_id, user_id, text_res, creator, media, post_id, post_type, carrier)
        self.recv_ComposePostOnlyMiddleAndLastThree()

    def send_ComposePostOnlyMiddleAndLastThree(self, req_id, user_id, text_res, creator, media, post_id, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostOnlyMiddleAndLastThree', TMessageType.CALL, self._seqid)
        args = ComposePostOnlyMiddleAndLastThree_args()
        args.req_id = req_id
        args.user_id = user_id
        args.text_res = text_res
        args.creator = creator
        args.media = media
        args.post_id = post_id
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostOnlyMiddleAndLastThree(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostOnlyMiddleAndLastThree_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaLastThreeInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaLastThreeInVM(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaLastThreeInVM()

    def send_ComposePostLambdaLastThreeInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaLastThreeInVM', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaLastThreeInVM_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaLastThreeInVM(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaLastThreeInVM_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaFirstFourInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaFirstFourInVM(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaFirstFourInVM()

    def send_ComposePostLambdaFirstFourInVM(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaFirstFourInVM', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaFirstFourInVM_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaFirstFourInVM(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaFirstFourInVM_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostOnlyFirstFourAndMiddle(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostOnlyFirstFourAndMiddle(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        return self.recv_ComposePostOnlyFirstFourAndMiddle()

    def send_ComposePostOnlyFirstFourAndMiddle(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostOnlyFirstFourAndMiddle', TMessageType.CALL, self._seqid)
        args = ComposePostOnlyFirstFourAndMiddle_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostOnlyFirstFourAndMiddle(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostOnlyFirstFourAndMiddle_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.se is not None:
            raise result.se
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ComposePostOnlyFirstFourAndMiddle failed: unknown result")

    def ComposePostOnlyFirstFour(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostOnlyFirstFour(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        return self.recv_ComposePostOnlyFirstFour()

    def send_ComposePostOnlyFirstFour(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostOnlyFirstFour', TMessageType.CALL, self._seqid)
        args = ComposePostOnlyFirstFour_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostOnlyFirstFour(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostOnlyFirstFour_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.se is not None:
            raise result.se
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ComposePostOnlyFirstFour failed: unknown result")

    def ComposePostLambdaHomeTimeline(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaHomeTimeline(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaHomeTimeline()

    def send_ComposePostLambdaHomeTimeline(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaHomeTimeline', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaHomeTimeline_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaHomeTimeline(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaHomeTimeline_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaTextService(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaTextService()

    def send_ComposePostLambdaTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaTextService', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaTextService_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaTextService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaTextService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaHomeTimelineAndTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaHomeTimelineAndTextService(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaHomeTimelineAndTextService()

    def send_ComposePostLambdaHomeTimelineAndTextService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaHomeTimelineAndTextService', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaHomeTimelineAndTextService_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaHomeTimelineAndTextService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaHomeTimelineAndTextService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaHomeTimelineAndTextPostStorageService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaHomeTimelineAndTextPostStorageService(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaHomeTimelineAndTextPostStorageService()

    def send_ComposePostLambdaHomeTimelineAndTextPostStorageService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaHomeTimelineAndTextPostStorageService', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaHomeTimelineAndTextPostStorageService_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaHomeTimelineAndTextPostStorageService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaHomeTimelineAndTextPostStorageService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - carrier

        """
        self.send_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(req_id, username, user_id, text, media_ids, media_types, post_type, carrier)
        self.recv_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService()

    def send_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(self, req_id, username, user_id, text, media_ids, media_types, post_type, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return

    def ComposePostLambdaLinearExperiment(self, req_id, username, user_id, text, media_ids, media_types, post_type, microservice_nums, carrier):
        """
        Parameters:
         - req_id
         - username
         - user_id
         - text
         - media_ids
         - media_types
         - post_type
         - microservice_nums
         - carrier

        """
        self.send_ComposePostLambdaLinearExperiment(req_id, username, user_id, text, media_ids, media_types, post_type, microservice_nums, carrier)
        self.recv_ComposePostLambdaLinearExperiment()

    def send_ComposePostLambdaLinearExperiment(self, req_id, username, user_id, text, media_ids, media_types, post_type, microservice_nums, carrier):
        self._oprot.writeMessageBegin('ComposePostLambdaLinearExperiment', TMessageType.CALL, self._seqid)
        args = ComposePostLambdaLinearExperiment_args()
        args.req_id = req_id
        args.username = username
        args.user_id = user_id
        args.text = text
        args.media_ids = media_ids
        args.media_types = media_types
        args.post_type = post_type
        args.microservice_nums = microservice_nums
        args.carrier = carrier
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ComposePostLambdaLinearExperiment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ComposePostLambdaLinearExperiment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.se is not None:
            raise result.se
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["ComposePost"] = Processor.process_ComposePost
        self._processMap["ComposePostOnlyLastThree"] = Processor.process_ComposePostOnlyLastThree
        self._processMap["ComposePostOnlyMiddleAndLastThree"] = Processor.process_ComposePostOnlyMiddleAndLastThree
        self._processMap["ComposePostLambdaLastThreeInVM"] = Processor.process_ComposePostLambdaLastThreeInVM
        self._processMap["ComposePostLambdaFirstFourInVM"] = Processor.process_ComposePostLambdaFirstFourInVM
        self._processMap["ComposePostOnlyFirstFourAndMiddle"] = Processor.process_ComposePostOnlyFirstFourAndMiddle
        self._processMap["ComposePostOnlyFirstFour"] = Processor.process_ComposePostOnlyFirstFour
        self._processMap["ComposePostLambdaHomeTimeline"] = Processor.process_ComposePostLambdaHomeTimeline
        self._processMap["ComposePostLambdaTextService"] = Processor.process_ComposePostLambdaTextService
        self._processMap["ComposePostLambdaHomeTimelineAndTextService"] = Processor.process_ComposePostLambdaHomeTimelineAndTextService
        self._processMap["ComposePostLambdaHomeTimelineAndTextPostStorageService"] = Processor.process_ComposePostLambdaHomeTimelineAndTextPostStorageService
        self._processMap["ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService"] = Processor.process_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService
        self._processMap["ComposePostLambdaLinearExperiment"] = Processor.process_ComposePostLambdaLinearExperiment
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_ComposePost(self, seqid, iprot, oprot):
        args = ComposePost_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePost_result()
        try:
            self._handler.ComposePost(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePost", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostOnlyLastThree(self, seqid, iprot, oprot):
        args = ComposePostOnlyLastThree_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostOnlyLastThree_result()
        try:
            self._handler.ComposePostOnlyLastThree(args.req_id, args.user_id, args.post, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostOnlyLastThree", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostOnlyMiddleAndLastThree(self, seqid, iprot, oprot):
        args = ComposePostOnlyMiddleAndLastThree_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostOnlyMiddleAndLastThree_result()
        try:
            self._handler.ComposePostOnlyMiddleAndLastThree(args.req_id, args.user_id, args.text_res, args.creator, args.media, args.post_id, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostOnlyMiddleAndLastThree", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaLastThreeInVM(self, seqid, iprot, oprot):
        args = ComposePostLambdaLastThreeInVM_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaLastThreeInVM_result()
        try:
            self._handler.ComposePostLambdaLastThreeInVM(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaLastThreeInVM", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaFirstFourInVM(self, seqid, iprot, oprot):
        args = ComposePostLambdaFirstFourInVM_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaFirstFourInVM_result()
        try:
            self._handler.ComposePostLambdaFirstFourInVM(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaFirstFourInVM", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostOnlyFirstFourAndMiddle(self, seqid, iprot, oprot):
        args = ComposePostOnlyFirstFourAndMiddle_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostOnlyFirstFourAndMiddle_result()
        try:
            result.success = self._handler.ComposePostOnlyFirstFourAndMiddle(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostOnlyFirstFourAndMiddle", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostOnlyFirstFour(self, seqid, iprot, oprot):
        args = ComposePostOnlyFirstFour_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostOnlyFirstFour_result()
        try:
            result.success = self._handler.ComposePostOnlyFirstFour(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostOnlyFirstFour", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaHomeTimeline(self, seqid, iprot, oprot):
        args = ComposePostLambdaHomeTimeline_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaHomeTimeline_result()
        try:
            self._handler.ComposePostLambdaHomeTimeline(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaHomeTimeline", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaTextService(self, seqid, iprot, oprot):
        args = ComposePostLambdaTextService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaTextService_result()
        try:
            self._handler.ComposePostLambdaTextService(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaTextService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaHomeTimelineAndTextService(self, seqid, iprot, oprot):
        args = ComposePostLambdaHomeTimelineAndTextService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaHomeTimelineAndTextService_result()
        try:
            self._handler.ComposePostLambdaHomeTimelineAndTextService(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaHomeTimelineAndTextService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaHomeTimelineAndTextPostStorageService(self, seqid, iprot, oprot):
        args = ComposePostLambdaHomeTimelineAndTextPostStorageService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaHomeTimelineAndTextPostStorageService_result()
        try:
            self._handler.ComposePostLambdaHomeTimelineAndTextPostStorageService(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaHomeTimelineAndTextPostStorageService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(self, seqid, iprot, oprot):
        args = ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result()
        try:
            self._handler.ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_ComposePostLambdaLinearExperiment(self, seqid, iprot, oprot):
        args = ComposePostLambdaLinearExperiment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ComposePostLambdaLinearExperiment_result()
        try:
            self._handler.ComposePostLambdaLinearExperiment(args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type, args.microservice_nums, args.carrier)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServiceException as se:
            msg_type = TMessageType.REPLY
            result.se = se
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ComposePostLambdaLinearExperiment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class ComposePost_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype117, _size114) = iprot.readListBegin()
                    for _i118 in range(_size114):
                        _elem119 = iprot.readI64()
                        self.media_ids.append(_elem119)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype123, _size120) = iprot.readListBegin()
                    for _i124 in range(_size120):
                        _elem125 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem125)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype127, _vtype128, _size126) = iprot.readMapBegin()
                    for _i130 in range(_size126):
                        _key131 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val132 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key131] = _val132
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePost_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter133 in self.media_ids:
                oprot.writeI64(iter133)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter134 in self.media_types:
                oprot.writeString(iter134.encode('utf-8') if sys.version_info[0] == 2 else iter134)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter135, viter136 in self.carrier.items():
                oprot.writeString(kiter135.encode('utf-8') if sys.version_info[0] == 2 else kiter135)
                oprot.writeString(viter136.encode('utf-8') if sys.version_info[0] == 2 else viter136)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePost_args)
ComposePost_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePost_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePost_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePost_result)
ComposePost_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostOnlyLastThree_args(object):
    """
    Attributes:
     - req_id
     - user_id
     - post
     - carrier

    """


    def __init__(self, req_id=None, user_id=None, post=None, carrier=None,):
        self.req_id = req_id
        self.user_id = user_id
        self.post = post
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.post = Post()
                    self.post.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype138, _vtype139, _size137) = iprot.readMapBegin()
                    for _i141 in range(_size137):
                        _key142 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val143 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key142] = _val143
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyLastThree_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 2)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.post is not None:
            oprot.writeFieldBegin('post', TType.STRUCT, 3)
            self.post.write(oprot)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 4)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter144, viter145 in self.carrier.items():
                oprot.writeString(kiter144.encode('utf-8') if sys.version_info[0] == 2 else kiter144)
                oprot.writeString(viter145.encode('utf-8') if sys.version_info[0] == 2 else viter145)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyLastThree_args)
ComposePostOnlyLastThree_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.I64, 'user_id', None, None, ),  # 2
    (3, TType.STRUCT, 'post', [Post, None], None, ),  # 3
    (4, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 4
)


class ComposePostOnlyLastThree_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyLastThree_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyLastThree_result)
ComposePostOnlyLastThree_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostOnlyMiddleAndLastThree_args(object):
    """
    Attributes:
     - req_id
     - user_id
     - text_res
     - creator
     - media
     - post_id
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, user_id=None, text_res=None, creator=None, media=None, post_id=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.user_id = user_id
        self.text_res = text_res
        self.creator = creator
        self.media = media
        self.post_id = post_id
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.text_res = TextServiceReturn()
                    self.text_res.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.creator = Creator()
                    self.creator.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media = []
                    (_etype149, _size146) = iprot.readListBegin()
                    for _i150 in range(_size146):
                        _elem151 = Media()
                        _elem151.read(iprot)
                        self.media.append(_elem151)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.post_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype153, _vtype154, _size152) = iprot.readMapBegin()
                    for _i156 in range(_size152):
                        _key157 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val158 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key157] = _val158
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyMiddleAndLastThree_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 2)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text_res is not None:
            oprot.writeFieldBegin('text_res', TType.STRUCT, 3)
            self.text_res.write(oprot)
            oprot.writeFieldEnd()
        if self.creator is not None:
            oprot.writeFieldBegin('creator', TType.STRUCT, 4)
            self.creator.write(oprot)
            oprot.writeFieldEnd()
        if self.media is not None:
            oprot.writeFieldBegin('media', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.media))
            for iter159 in self.media:
                iter159.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I64, 6)
            oprot.writeI64(self.post_id)
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter160, viter161 in self.carrier.items():
                oprot.writeString(kiter160.encode('utf-8') if sys.version_info[0] == 2 else kiter160)
                oprot.writeString(viter161.encode('utf-8') if sys.version_info[0] == 2 else viter161)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyMiddleAndLastThree_args)
ComposePostOnlyMiddleAndLastThree_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.I64, 'user_id', None, None, ),  # 2
    (3, TType.STRUCT, 'text_res', [TextServiceReturn, None], None, ),  # 3
    (4, TType.STRUCT, 'creator', [Creator, None], None, ),  # 4
    (5, TType.LIST, 'media', (TType.STRUCT, [Media, None], False), None, ),  # 5
    (6, TType.I64, 'post_id', None, None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostOnlyMiddleAndLastThree_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyMiddleAndLastThree_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyMiddleAndLastThree_result)
ComposePostOnlyMiddleAndLastThree_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaLastThreeInVM_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype165, _size162) = iprot.readListBegin()
                    for _i166 in range(_size162):
                        _elem167 = iprot.readI64()
                        self.media_ids.append(_elem167)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype171, _size168) = iprot.readListBegin()
                    for _i172 in range(_size168):
                        _elem173 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem173)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype175, _vtype176, _size174) = iprot.readMapBegin()
                    for _i178 in range(_size174):
                        _key179 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val180 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key179] = _val180
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaLastThreeInVM_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter181 in self.media_ids:
                oprot.writeI64(iter181)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter182 in self.media_types:
                oprot.writeString(iter182.encode('utf-8') if sys.version_info[0] == 2 else iter182)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter183, viter184 in self.carrier.items():
                oprot.writeString(kiter183.encode('utf-8') if sys.version_info[0] == 2 else kiter183)
                oprot.writeString(viter184.encode('utf-8') if sys.version_info[0] == 2 else viter184)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaLastThreeInVM_args)
ComposePostLambdaLastThreeInVM_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaLastThreeInVM_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaLastThreeInVM_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaLastThreeInVM_result)
ComposePostLambdaLastThreeInVM_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaFirstFourInVM_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype188, _size185) = iprot.readListBegin()
                    for _i189 in range(_size185):
                        _elem190 = iprot.readI64()
                        self.media_ids.append(_elem190)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype194, _size191) = iprot.readListBegin()
                    for _i195 in range(_size191):
                        _elem196 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem196)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype198, _vtype199, _size197) = iprot.readMapBegin()
                    for _i201 in range(_size197):
                        _key202 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val203 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key202] = _val203
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaFirstFourInVM_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter204 in self.media_ids:
                oprot.writeI64(iter204)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter205 in self.media_types:
                oprot.writeString(iter205.encode('utf-8') if sys.version_info[0] == 2 else iter205)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter206, viter207 in self.carrier.items():
                oprot.writeString(kiter206.encode('utf-8') if sys.version_info[0] == 2 else kiter206)
                oprot.writeString(viter207.encode('utf-8') if sys.version_info[0] == 2 else viter207)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaFirstFourInVM_args)
ComposePostLambdaFirstFourInVM_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaFirstFourInVM_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaFirstFourInVM_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaFirstFourInVM_result)
ComposePostLambdaFirstFourInVM_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostOnlyFirstFourAndMiddle_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype211, _size208) = iprot.readListBegin()
                    for _i212 in range(_size208):
                        _elem213 = iprot.readI64()
                        self.media_ids.append(_elem213)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype217, _size214) = iprot.readListBegin()
                    for _i218 in range(_size214):
                        _elem219 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem219)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype221, _vtype222, _size220) = iprot.readMapBegin()
                    for _i224 in range(_size220):
                        _key225 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val226 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key225] = _val226
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyFirstFourAndMiddle_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter227 in self.media_ids:
                oprot.writeI64(iter227)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter228 in self.media_types:
                oprot.writeString(iter228.encode('utf-8') if sys.version_info[0] == 2 else iter228)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter229, viter230 in self.carrier.items():
                oprot.writeString(kiter229.encode('utf-8') if sys.version_info[0] == 2 else kiter229)
                oprot.writeString(viter230.encode('utf-8') if sys.version_info[0] == 2 else viter230)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyFirstFourAndMiddle_args)
ComposePostOnlyFirstFourAndMiddle_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostOnlyFirstFourAndMiddle_result(object):
    """
    Attributes:
     - success
     - se

    """


    def __init__(self, success=None, se=None,):
        self.success = success
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ComposePostOnlyFirstFourAndMiddleReturn()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyFirstFourAndMiddle_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyFirstFourAndMiddle_result)
ComposePostOnlyFirstFourAndMiddle_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ComposePostOnlyFirstFourAndMiddleReturn, None], None, ),  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostOnlyFirstFour_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype234, _size231) = iprot.readListBegin()
                    for _i235 in range(_size231):
                        _elem236 = iprot.readI64()
                        self.media_ids.append(_elem236)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype240, _size237) = iprot.readListBegin()
                    for _i241 in range(_size237):
                        _elem242 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem242)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype244, _vtype245, _size243) = iprot.readMapBegin()
                    for _i247 in range(_size243):
                        _key248 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val249 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key248] = _val249
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyFirstFour_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter250 in self.media_ids:
                oprot.writeI64(iter250)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter251 in self.media_types:
                oprot.writeString(iter251.encode('utf-8') if sys.version_info[0] == 2 else iter251)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter252, viter253 in self.carrier.items():
                oprot.writeString(kiter252.encode('utf-8') if sys.version_info[0] == 2 else kiter252)
                oprot.writeString(viter253.encode('utf-8') if sys.version_info[0] == 2 else viter253)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyFirstFour_args)
ComposePostOnlyFirstFour_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostOnlyFirstFour_result(object):
    """
    Attributes:
     - success
     - se

    """


    def __init__(self, success=None, se=None,):
        self.success = success
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = ComposePostOnlyFirstFourReturn()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostOnlyFirstFour_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostOnlyFirstFour_result)
ComposePostOnlyFirstFour_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [ComposePostOnlyFirstFourReturn, None], None, ),  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaHomeTimeline_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype257, _size254) = iprot.readListBegin()
                    for _i258 in range(_size254):
                        _elem259 = iprot.readI64()
                        self.media_ids.append(_elem259)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype263, _size260) = iprot.readListBegin()
                    for _i264 in range(_size260):
                        _elem265 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem265)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype267, _vtype268, _size266) = iprot.readMapBegin()
                    for _i270 in range(_size266):
                        _key271 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val272 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key271] = _val272
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimeline_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter273 in self.media_ids:
                oprot.writeI64(iter273)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter274 in self.media_types:
                oprot.writeString(iter274.encode('utf-8') if sys.version_info[0] == 2 else iter274)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter275, viter276 in self.carrier.items():
                oprot.writeString(kiter275.encode('utf-8') if sys.version_info[0] == 2 else kiter275)
                oprot.writeString(viter276.encode('utf-8') if sys.version_info[0] == 2 else viter276)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimeline_args)
ComposePostLambdaHomeTimeline_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaHomeTimeline_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimeline_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimeline_result)
ComposePostLambdaHomeTimeline_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaTextService_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype280, _size277) = iprot.readListBegin()
                    for _i281 in range(_size277):
                        _elem282 = iprot.readI64()
                        self.media_ids.append(_elem282)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype286, _size283) = iprot.readListBegin()
                    for _i287 in range(_size283):
                        _elem288 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem288)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype290, _vtype291, _size289) = iprot.readMapBegin()
                    for _i293 in range(_size289):
                        _key294 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val295 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key294] = _val295
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaTextService_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter296 in self.media_ids:
                oprot.writeI64(iter296)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter297 in self.media_types:
                oprot.writeString(iter297.encode('utf-8') if sys.version_info[0] == 2 else iter297)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter298, viter299 in self.carrier.items():
                oprot.writeString(kiter298.encode('utf-8') if sys.version_info[0] == 2 else kiter298)
                oprot.writeString(viter299.encode('utf-8') if sys.version_info[0] == 2 else viter299)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaTextService_args)
ComposePostLambdaTextService_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaTextService_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaTextService_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaTextService_result)
ComposePostLambdaTextService_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaHomeTimelineAndTextService_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype303, _size300) = iprot.readListBegin()
                    for _i304 in range(_size300):
                        _elem305 = iprot.readI64()
                        self.media_ids.append(_elem305)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype309, _size306) = iprot.readListBegin()
                    for _i310 in range(_size306):
                        _elem311 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem311)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype313, _vtype314, _size312) = iprot.readMapBegin()
                    for _i316 in range(_size312):
                        _key317 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val318 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key317] = _val318
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextService_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter319 in self.media_ids:
                oprot.writeI64(iter319)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter320 in self.media_types:
                oprot.writeString(iter320.encode('utf-8') if sys.version_info[0] == 2 else iter320)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter321, viter322 in self.carrier.items():
                oprot.writeString(kiter321.encode('utf-8') if sys.version_info[0] == 2 else kiter321)
                oprot.writeString(viter322.encode('utf-8') if sys.version_info[0] == 2 else viter322)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextService_args)
ComposePostLambdaHomeTimelineAndTextService_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaHomeTimelineAndTextService_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextService_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextService_result)
ComposePostLambdaHomeTimelineAndTextService_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaHomeTimelineAndTextPostStorageService_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype326, _size323) = iprot.readListBegin()
                    for _i327 in range(_size323):
                        _elem328 = iprot.readI64()
                        self.media_ids.append(_elem328)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype332, _size329) = iprot.readListBegin()
                    for _i333 in range(_size329):
                        _elem334 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem334)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype336, _vtype337, _size335) = iprot.readMapBegin()
                    for _i339 in range(_size335):
                        _key340 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val341 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key340] = _val341
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextPostStorageService_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter342 in self.media_ids:
                oprot.writeI64(iter342)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter343 in self.media_types:
                oprot.writeString(iter343.encode('utf-8') if sys.version_info[0] == 2 else iter343)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter344, viter345 in self.carrier.items():
                oprot.writeString(kiter344.encode('utf-8') if sys.version_info[0] == 2 else kiter344)
                oprot.writeString(viter345.encode('utf-8') if sys.version_info[0] == 2 else viter345)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextPostStorageService_args)
ComposePostLambdaHomeTimelineAndTextPostStorageService_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaHomeTimelineAndTextPostStorageService_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextPostStorageService_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextPostStorageService_result)
ComposePostLambdaHomeTimelineAndTextPostStorageService_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype349, _size346) = iprot.readListBegin()
                    for _i350 in range(_size346):
                        _elem351 = iprot.readI64()
                        self.media_ids.append(_elem351)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype355, _size352) = iprot.readListBegin()
                    for _i356 in range(_size352):
                        _elem357 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem357)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype359, _vtype360, _size358) = iprot.readMapBegin()
                    for _i362 in range(_size358):
                        _key363 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val364 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key363] = _val364
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter365 in self.media_ids:
                oprot.writeI64(iter365)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter366 in self.media_types:
                oprot.writeString(iter366.encode('utf-8') if sys.version_info[0] == 2 else iter366)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 8)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter367, viter368 in self.carrier.items():
                oprot.writeString(kiter367.encode('utf-8') if sys.version_info[0] == 2 else kiter367)
                oprot.writeString(viter368.encode('utf-8') if sys.version_info[0] == 2 else viter368)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args)
ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 8
)


class ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result)
ComposePostLambdaHomeTimelineAndTextPostStorageUserTimelineService_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)


class ComposePostLambdaLinearExperiment_args(object):
    """
    Attributes:
     - req_id
     - username
     - user_id
     - text
     - media_ids
     - media_types
     - post_type
     - microservice_nums
     - carrier

    """


    def __init__(self, req_id=None, username=None, user_id=None, text=None, media_ids=None, media_types=None, post_type=None, microservice_nums=None, carrier=None,):
        self.req_id = req_id
        self.username = username
        self.user_id = user_id
        self.text = text
        self.media_ids = media_ids
        self.media_types = media_types
        self.post_type = post_type
        self.microservice_nums = microservice_nums
        self.carrier = carrier

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.req_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.media_ids = []
                    (_etype372, _size369) = iprot.readListBegin()
                    for _i373 in range(_size369):
                        _elem374 = iprot.readI64()
                        self.media_ids.append(_elem374)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.media_types = []
                    (_etype378, _size375) = iprot.readListBegin()
                    for _i379 in range(_size375):
                        _elem380 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.media_types.append(_elem380)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.post_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.microservice_nums = []
                    (_etype384, _size381) = iprot.readListBegin()
                    for _i385 in range(_size381):
                        _elem386 = iprot.readI64()
                        self.microservice_nums.append(_elem386)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.MAP:
                    self.carrier = {}
                    (_ktype388, _vtype389, _size387) = iprot.readMapBegin()
                    for _i391 in range(_size387):
                        _key392 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val393 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.carrier[_key392] = _val393
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaLinearExperiment_args')
        if self.req_id is not None:
            oprot.writeFieldBegin('req_id', TType.I64, 1)
            oprot.writeI64(self.req_id)
            oprot.writeFieldEnd()
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 2)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 3)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 4)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        if self.media_ids is not None:
            oprot.writeFieldBegin('media_ids', TType.LIST, 5)
            oprot.writeListBegin(TType.I64, len(self.media_ids))
            for iter394 in self.media_ids:
                oprot.writeI64(iter394)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.media_types is not None:
            oprot.writeFieldBegin('media_types', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.media_types))
            for iter395 in self.media_types:
                oprot.writeString(iter395.encode('utf-8') if sys.version_info[0] == 2 else iter395)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.post_type is not None:
            oprot.writeFieldBegin('post_type', TType.I32, 7)
            oprot.writeI32(self.post_type)
            oprot.writeFieldEnd()
        if self.microservice_nums is not None:
            oprot.writeFieldBegin('microservice_nums', TType.LIST, 8)
            oprot.writeListBegin(TType.I64, len(self.microservice_nums))
            for iter396 in self.microservice_nums:
                oprot.writeI64(iter396)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.carrier is not None:
            oprot.writeFieldBegin('carrier', TType.MAP, 9)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.carrier))
            for kiter397, viter398 in self.carrier.items():
                oprot.writeString(kiter397.encode('utf-8') if sys.version_info[0] == 2 else kiter397)
                oprot.writeString(viter398.encode('utf-8') if sys.version_info[0] == 2 else viter398)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaLinearExperiment_args)
ComposePostLambdaLinearExperiment_args.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'req_id', None, None, ),  # 1
    (2, TType.STRING, 'username', 'UTF8', None, ),  # 2
    (3, TType.I64, 'user_id', None, None, ),  # 3
    (4, TType.STRING, 'text', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'media_ids', (TType.I64, None, False), None, ),  # 5
    (6, TType.LIST, 'media_types', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'post_type', None, None, ),  # 7
    (8, TType.LIST, 'microservice_nums', (TType.I64, None, False), None, ),  # 8
    (9, TType.MAP, 'carrier', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 9
)


class ComposePostLambdaLinearExperiment_result(object):
    """
    Attributes:
     - se

    """


    def __init__(self, se=None,):
        self.se = se

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.se = ServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ComposePostLambdaLinearExperiment_result')
        if self.se is not None:
            oprot.writeFieldBegin('se', TType.STRUCT, 1)
            self.se.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ComposePostLambdaLinearExperiment_result)
ComposePostLambdaLinearExperiment_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'se', [ServiceException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
